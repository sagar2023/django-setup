"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 3.0.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
from decouple import config


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('DJANGO_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [config('ALLOWED_HOSTS')]
CSRF_TRUSTED_ORIGINS = [config('CSRF_TRUSTED_ORIGINS')]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Added later
    'rest_framework',
    'corsheaders',
    'rest_framework.authtoken',
    'django_filters',
    'accounts',
    'admins',
    'core',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    # Allow cors headers
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
]

# if config('SQL_PRINT_STATEMENT'):
#     MIDDLEWARE.append(config('SQL_PRINT_STATEMENT'))
#     SQLPRINT_MAX_QUERIES = 25

ROOT_URLCONF = 'config.urls'

# Authentication user model
AUTH_USER_MODEL = 'accounts.User'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# Rest Framework Configuration
REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': ('django_filters.rest_framework.DjangoFilterBackend',),
    'DEFAULT_PAGINATION_CLASS': 'core.pagination.CustomPagination',
    'DEFAULT_AUTHENTICATION_CLASSES': ('rest_framework.authentication.TokenAuthentication', ),
    'EXCEPTION_HANDLER': 'core.exception.custom_exception_handler',
    'DATETIME_FORMAT': "%Y-%m-%dT%H:%M:%SZ",
}

# Allow Cors origin
CORS_ORIGIN_ALLOW_ALL = True

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': config('DB_NAME'),
        'USER': config('DB_USER'),
        'PASSWORD': config('DB_PASSWORD'),
        'HOST': config('DB_HOST'),
        'PORT': '3306',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'
USE_I18N = True
USE_L10N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

# For collectstatic
# STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATIC_URL = '/static/'
# STATICFILES_DIRS = [
#    os.path.join(BASE_DIR, "static"),
# ]

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# SAML2_AUTH = {
#   'METADATA_LOCAL_FILE_PATH': os.path.join(BASE_DIR, 'config/saml2_metadata.xml'),
#   'ASSERTION_URL': 'http://127.0.0.1:8000',
#   'ENTITY_ID': 'http://127.0.0.1:8000/sso/acs/',
#   'ATTRIBUTES_MAP': {  # Change Email/UserName/FirstName/LastName to
#         # corresponding SAML2 userprofile attributes.
#         'email': 'email',
#         'username': 'username',
#         'first_name': 'first_name',
#         'last_name': 'last_name'
#     },
#   'DEFAULT_NEXT_URL': config('DEFAULT_NEXT_URL'),
#   'USE_JWT': False,
#   'FRONTEND_URL': 'https://FRONTEND.example.com',
#   'CREATE_USER': True
# }




# Logger Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, config('LOG_FILE_NAME')),
            'formatter': 'simple',
            'maxBytes': 10*1024*1024,
            'backupCount': 1,
        },
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        }
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
    'formatters': {
         'simple': {
             'format': 'TIME: %(asctime)s >>> MODULE: %(module)s >>> LEVEL: %(levelname)s >>> MSG: %(message)s',
         },
    },
    'root': {
        'handlers': ['file'],
        'level': 'INFO'
    },
}
